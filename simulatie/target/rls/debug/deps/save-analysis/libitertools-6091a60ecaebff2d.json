{"config":{"output_file":null,"full_docs":false,"pub_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"itertools","disambiguator":[16166151909939470534,4721041012000447352]},"crate_root":".cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src","external_crates":[{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":11,"id":{"name":"either","disambiguator":[3678254759276287574,16434415861653673798]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[8738806026161230330,3781608880844894588]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[10336128633598011868,10340831318577393010]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3581102226906677031,3276304826724359617]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[703681872048928520,9049002948068361285]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2263930034501991030,4095801913223090716]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[11540587595057943686,16811948693617420789]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[18135972976458475440,14500584310801144659]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":9,"id":{"name":"alloc_jemalloc","disambiguator":[3136525304541147205,13942228075046867031]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6188724401783059987,18077621352408124788]}},{"file_name":"/home/alfonso/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","num":3,"id":{"name":"alloc","disambiguator":[13692754116872877343,17091487213619735721]}}],"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":62735,"line_start":1,"line_end":1914,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":11,"index":62},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":825,"byte_end":831,"line_start":32,"line_end":32,"column_start":17,"column_end":23},"name":"Either","value":""},{"kind":"Use","ref_id":{"krate":2,"index":1628},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1113,"byte_end":1123,"line_start":47,"line_end":47,"column_start":22,"column_end":32},"name":"__std_iter","value":""},{"kind":"Use","ref_id":{"krate":0,"index":287},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1585,"byte_end":1597,"line_start":71,"line_end":71,"column_start":27,"column_end":39},"name":"Combinations","value":""},{"kind":"Use","ref_id":{"krate":0,"index":280},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1629,"byte_end":1639,"line_start":72,"line_end":72,"column_start":31,"column_end":41},"name":"ConsTuples","value":""},{"kind":"Use","ref_id":{"krate":0,"index":894},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1818,"byte_end":1829,"line_start":76,"line_end":76,"column_start":26,"column_end":37},"name":"Intersperse","value":""},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1932,"byte_end":1943,"line_start":79,"line_end":79,"column_start":25,"column_end":36},"name":"MergeJoinBy","value":""},{"kind":"Use","ref_id":{"krate":0,"index":906},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2005,"byte_end":2014,"line_start":81,"line_end":81,"column_start":29,"column_end":38},"name":"MultiPeek","value":""},{"kind":"Use","ref_id":{"krate":0,"index":911},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2038,"byte_end":2046,"line_start":82,"line_end":82,"column_start":23,"column_end":31},"name":"PadUsing","value":""},{"kind":"Use","ref_id":{"krate":0,"index":473},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2080,"byte_end":2096,"line_start":83,"line_end":83,"column_start":33,"column_end":49},"name":"PeekingTakeWhile","value":""},{"kind":"Use","ref_id":{"krate":0,"index":481},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2132,"byte_end":2146,"line_start":84,"line_end":84,"column_start":35,"column_end":49},"name":"ProcessResults","value":""},{"kind":"Use","ref_id":{"krate":0,"index":934},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2209,"byte_end":2217,"line_start":86,"line_end":86,"column_start":30,"column_end":38},"name":"PutBackN","value":""},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2276,"byte_end":2282,"line_start":88,"line_end":88,"column_start":26,"column_end":32},"name":"RcIter","value":""},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2305,"byte_end":2312,"line_start":89,"line_end":89,"column_start":22,"column_end":29},"name":"RepeatN","value":""},{"kind":"Use","ref_id":{"krate":0,"index":563},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2415,"byte_end":2418,"line_start":92,"line_end":92,"column_start":18,"column_end":21},"name":"Tee","value":""},{"kind":"Use","ref_id":{"krate":0,"index":623},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2585,"byte_end":2597,"line_start":96,"line_end":96,"column_start":28,"column_end":40},"name":"WithPosition","value":""},{"kind":"Use","ref_id":{"krate":0,"index":997},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2624,"byte_end":2629,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"name":"ZipEq","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1000},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2656,"byte_end":2666,"line_start":98,"line_end":98,"column_start":26,"column_end":36},"name":"ZipLongest","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1003},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2690,"byte_end":2693,"line_start":99,"line_end":99,"column_start":23,"column_end":26},"name":"Zip","value":""},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2714,"byte_end":2715,"line_start":101,"line_end":101,"column_start":18,"column_end":19},"name":"*","value":"Interleave, PutBackN, PadUsing, KMergeBy, Intersperse, FormatWith, Flatten, WhileSome, Merge, Batching, InterleaveShortest, WithPosition, Unique, TupleWindows, Tee, Combinations, Positions, Coalesce, MergeBy, ZipLongest, Step, Product, Dedup, UniqueBy, Tuples, PeekingTakeWhile, MergeJoinBy, KMerge, GroupBy, IntoChunks, Format, Update, TupleCombinations, TakeWhileRef, MapResults, PutBack, ZipEq"},{"kind":"Use","ref_id":{"krate":0,"index":277},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2738,"byte_end":2744,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"name":"concat","value":""},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2772,"byte_end":2783,"line_start":103,"line_end":103,"column_start":27,"column_end":38},"name":"cons_tuples","value":""},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2799,"byte_end":2808,"line_start":104,"line_end":104,"column_start":15,"column_end":24},"name":"diff_with","value":""},{"kind":"Use","ref_id":{"krate":0,"index":304},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2824,"byte_end":2828,"line_start":105,"line_end":105,"column_start":15,"column_end":19},"name":"Diff","value":""},{"kind":"Use","ref_id":{"krate":0,"index":897},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2908,"byte_end":2920,"line_start":108,"line_end":108,"column_start":17,"column_end":29},"name":"MinMaxResult","value":""},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2950,"byte_end":2961,"line_start":109,"line_end":109,"column_start":29,"column_end":40},"name":"PeekingNext","value":""},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2993,"byte_end":3008,"line_start":110,"line_end":110,"column_start":31,"column_end":46},"name":"process_results","value":""},{"kind":"Use","ref_id":{"krate":0,"index":516},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3027,"byte_end":3035,"line_start":111,"line_end":111,"column_start":18,"column_end":26},"name":"repeat_n","value":""},{"kind":"Use","ref_id":{"krate":0,"index":988},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3109,"byte_end":3117,"line_start":113,"line_end":113,"column_start":24,"column_end":32},"name":"Position","value":""},{"kind":"Use","ref_id":{"krate":0,"index":658},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3137,"byte_end":3145,"line_start":114,"line_end":114,"column_start":19,"column_end":27},"name":"multizip","value":""},{"kind":"Use","ref_id":{"krate":0,"index":817},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3205,"byte_end":3217,"line_start":117,"line_end":117,"column_start":25,"column_end":37},"name":"EitherOrBoth","value":""},{"kind":"Use","ref_id":{"krate":0,"index":489},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":96722,"byte_end":96732,"line_start":18,"line_end":18,"column_start":26,"column_end":36},"name":"put_back_n","value":""},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":96786,"byte_end":96795,"line_start":20,"line_end":20,"column_start":25,"column_end":34},"name":"multipeek","value":""},{"kind":"Use","ref_id":{"krate":0,"index":406},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":96846,"byte_end":96852,"line_start":22,"line_end":22,"column_start":22,"column_end":28},"name":"kmerge","value":""},{"kind":"Use","ref_id":{"krate":0,"index":634},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":96875,"byte_end":96881,"line_start":23,"line_end":23,"column_start":22,"column_end":28},"name":"zip_eq","value":""},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":96903,"byte_end":96916,"line_start":24,"line_end":24,"column_start":21,"column_end":34},"name":"merge_join_by","value":""},{"kind":"Use","ref_id":{"krate":0,"index":501},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":96967,"byte_end":96973,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"name":"rciter","value":""},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3277,"byte_end":3278,"line_start":121,"line_end":121,"column_start":15,"column_end":16},"name":"*","value":"merge, zip_eq, kmerge, merge_join_by, fold, interleave"}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":62735,"line_start":1,"line_end":1914,"column_start":1,"column_end":2},"name":"","qualname":"::","value":".cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":284},{"krate":0,"index":301},{"krate":0,"index":306},{"krate":0,"index":317},{"krate":0,"index":383},{"krate":0,"index":391},{"krate":0,"index":419},{"krate":0,"index":432},{"krate":0,"index":436},{"krate":0,"index":450},{"krate":0,"index":461},{"krate":0,"index":480},{"krate":0,"index":487},{"krate":0,"index":496},{"krate":0,"index":514},{"krate":0,"index":524},{"krate":0,"index":535},{"krate":0,"index":557},{"krate":0,"index":570},{"krate":0,"index":601},{"krate":0,"index":619},{"krate":0,"index":632},{"krate":0,"index":640},{"krate":0,"index":656},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":1062},{"krate":0,"index":1067},{"krate":0,"index":1065},{"krate":0,"index":1063},{"krate":0,"index":723}],"decl_id":null,"docs":" Itertools — extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1167,"byte_end":1174,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":".cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":726},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":64067,"byte_end":64077,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":2147484288},{"krate":0,"index":2147484289},{"krate":0,"index":2147484290}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":63982,"byte_end":64055,"line_start":31,"line_end":31,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":64407,"byte_end":64417,"line_start":49,"line_end":49,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"fn <I, J> (i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":731},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":65682,"byte_end":65700,"line_start":95,"line_end":95,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":2147484297},{"krate":0,"index":2147484298},{"krate":0,"index":2147484299}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":65597,"byte_end":65670,"line_start":94,"line_end":94,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":65900,"byte_end":65919,"line_start":105,"line_end":105,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::adaptors::interleave_shortest","value":"fn <I, J> (a: I, b: J) -> InterleaveShortest<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `InterleaveShortest` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":736},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":68102,"byte_end":68109,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":2147484306},{"krate":0,"index":2147484307}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":68246,"byte_end":68254,"line_start":192,"line_end":192,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"fn <I> (iterable: I) -> PutBack<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":68503,"byte_end":68513,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn (mut self, value: I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":68669,"byte_end":68679,"line_start":212,"line_end":212,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn (self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":68944,"byte_end":68952,"line_start":221,"line_end":221,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":70413,"byte_end":70420,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":2147484311},{"krate":0,"index":2147484312},{"krate":0,"index":2147484313},{"krate":0,"index":2147484314}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":70328,"byte_end":70401,"line_start":272,"line_end":272,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":70623,"byte_end":70640,"line_start":285,"line_end":285,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::adaptors::cartesian_product","value":"fn <I, J> (mut i: I, j: J) -> Product<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create a new cartesian product iterator","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":746},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73259,"byte_end":73267,"line_start":369,"line_end":369,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":2147484321},{"krate":0,"index":2147484322}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73174,"byte_end":73247,"line_start":368,"line_end":368,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":129},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73450,"byte_end":73458,"line_start":379,"line_end":379,"column_start":8,"column_end":16},"name":"batching","qualname":"::adaptors::batching","value":"fn <I, F> (iter: I, f: F) -> Batching<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Batching iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":74308,"byte_end":74312,"line_start":409,"line_end":409,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":2147484327},{"krate":0,"index":2147484328}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":74223,"byte_end":74296,"line_start":408,"line_end":408,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":74431,"byte_end":74435,"line_start":417,"line_end":417,"column_start":8,"column_end":12},"name":"step","qualname":"::adaptors::step","value":"fn <I> (iter: I, step: usize) -> Step<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Step` iterator.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":146},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":77060,"byte_end":77065,"line_start":523,"line_end":523,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":2147483701}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76975,"byte_end":77048,"line_start":522,"line_end":522,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":150},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":77853,"byte_end":77858,"line_start":559,"line_end":559,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"fn <I, J> (i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":155},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78931,"byte_end":78938,"line_start":596,"line_end":596,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":2147483713},{"krate":0,"index":2147483714}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78846,"byte_end":78919,"line_start":595,"line_end":595,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":79304,"byte_end":79316,"line_start":612,"line_end":612,"column_start":8,"column_end":20},"name":"merge_by_new","qualname":"::adaptors::merge_by_new","value":"fn <I, J, F> (a: I, b: J, cmp: F) -> MergeBy<I, J, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a `MergeBy` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":757},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":80266,"byte_end":80278,"line_start":655,"line_end":655,"column_start":12,"column_end":24},"name":"CoalesceCore","qualname":"::adaptors::CoalesceCore","value":"CoalesceCore {  }","parent":null,"children":[{"krate":0,"index":2147484332},{"krate":0,"index":2147484333}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":167},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81489,"byte_end":81497,"line_start":697,"line_end":697,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":2147483732},{"krate":0,"index":2147483733}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81404,"byte_end":81477,"line_start":696,"line_end":696,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81942,"byte_end":81950,"line_start":721,"line_end":721,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::adaptors::coalesce","value":"fn <I, F> (mut iter: I, f: F) -> Coalesce<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Coalesce`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82728,"byte_end":82733,"line_start":752,"line_end":752,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":2147483744}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82643,"byte_end":82716,"line_start":751,"line_end":751,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":179},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82988,"byte_end":82993,"line_start":768,"line_end":768,"column_start":8,"column_end":13},"name":"dedup","qualname":"::adaptors::dedup","value":"fn <I> (mut iter: I) -> Dedup<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Dedup`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84444,"byte_end":84456,"line_start":825,"line_end":825,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":2147483754},{"krate":0,"index":2147483755}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84359,"byte_end":84432,"line_start":824,"line_end":824,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84722,"byte_end":84736,"line_start":837,"line_end":837,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::adaptors::take_while_ref","value":"fn <I, F> (iter: &mut I, f: F) -> TakeWhileRef<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TakeWhileRef` from a reference to clonable iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":765},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85829,"byte_end":85838,"line_start":876,"line_end":876,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":2147484337}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85744,"byte_end":85817,"line_start":875,"line_end":875,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85900,"byte_end":85910,"line_start":881,"line_end":881,"column_start":8,"column_end":18},"name":"while_some","qualname":"::adaptors::while_some","value":"fn <I> (iter: I) -> WhileSome<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `WhileSome<I>`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86689,"byte_end":86706,"line_start":910,"line_end":910,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":2147484341},{"krate":0,"index":2147484342},{"krate":0,"index":2147484343}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86604,"byte_end":86677,"line_start":909,"line_end":909,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":198},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86857,"byte_end":86871,"line_start":919,"line_end":919,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>:  Sized","parent":null,"children":[{"krate":0,"index":199}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":199},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86893,"byte_end":86904,"line_start":920,"line_end":920,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87012,"byte_end":87030,"line_start":924,"line_end":924,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::adaptors::tuple_combinations","value":"fn <T, I> (iter: I) -> TupleCombinations<I, T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TupleCombinations` from a clonable iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":773},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87525,"byte_end":87542,"line_start":948,"line_end":948,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":2147484348}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":812},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90236,"byte_end":90243,"line_start":1039,"line_end":1039,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::adaptors::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":2147484390},{"krate":0,"index":2147484391}],"decl_id":null,"docs":" An iterator adapter to simply flatten a structure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90151,"byte_end":90224,"line_start":1038,"line_end":1038,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90334,"byte_end":90341,"line_start":1045,"line_end":1045,"column_start":8,"column_end":15},"name":"flatten","qualname":"::adaptors::flatten","value":"fn <I, J> (iter: I) -> Flatten<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Flatten` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":217},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91725,"byte_end":91735,"line_start":1092,"line_end":1092,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":2147483786},{"krate":0,"index":2147483787}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91640,"byte_end":91713,"line_start":1091,"line_end":1091,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91816,"byte_end":91827,"line_start":1098,"line_end":1098,"column_start":8,"column_end":19},"name":"map_results","qualname":"::adaptors::map_results","value":"fn <I, F, T, U, E> (iter: I, f: F) -> MapResults<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `MapResults` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":225},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93026,"byte_end":93035,"line_start":1141,"line_end":1141,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":2147483806},{"krate":0,"index":2147483807},{"krate":0,"index":2147483808}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92941,"byte_end":93014,"line_start":1140,"line_end":1140,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93134,"byte_end":93143,"line_start":1148,"line_end":1148,"column_start":8,"column_end":17},"name":"positions","qualname":"::adaptors::positions","value":"fn <I, F> (iter: I, f: F) -> Positions<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Positions` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":233},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94451,"byte_end":94457,"line_start":1199,"line_end":1199,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":2147483817},{"krate":0,"index":2147483818}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94366,"byte_end":94439,"line_start":1198,"line_end":1198,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94535,"byte_end":94541,"line_start":1205,"line_end":1205,"column_start":8,"column_end":14},"name":"update","qualname":"::adaptors::update","value":"fn <I, F> (iter: I, f: F) -> Update<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Update` iterator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484398},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":96120,"byte_end":96124,"line_start":5,"line_end":5,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484401},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":96188,"byte_end":96192,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484403},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":96254,"byte_end":96259,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":817},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":96062,"byte_end":96074,"line_start":3,"line_end":3,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"EitherOrBoth::{Both, Left, Right}","parent":null,"children":[{"krate":0,"index":2147484398},{"krate":0,"index":2147484401},{"krate":0,"index":2147484403}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":96053,"byte_end":96265,"line_start":3,"line_end":10,"column_start":1,"column_end":2}}]},{"kind":"Mod","id":{"krate":0,"index":246},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":".cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.4/src/free.rs","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":97214,"byte_end":97223,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn <I> (iterable: I) -> iter::Enumerate<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":97545,"byte_end":97548,"line_start":56,"line_end":56,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn <I> (iterable: I) -> iter::Rev<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":97949,"byte_end":97952,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn <I, J> (i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":265},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":98332,"byte_end":98337,"line_start":93,"line_end":93,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn <I, J> (i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":266},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":98760,"byte_end":98766,"line_start":109,"line_end":109,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn <'a, I, T> (iterable: I) -> iter::Cloned<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":267},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":99154,"byte_end":99158,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn <I, B, F> (iterable: I, init: B, f: F) -> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":268},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":99533,"byte_end":99536,"line_start":141,"line_end":141,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":269},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":99896,"byte_end":99899,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":270},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":100224,"byte_end":100227,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":271},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":100540,"byte_end":100543,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":100936,"byte_end":100940,"line_start":207,"line_end":207,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"fn <I> (iterable: I, sep: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":100901,"byte_end":100928,"line_start":206,"line_end":206,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":101393,"byte_end":101399,"line_start":225,"line_end":225,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"fn <I> (iterable: I) -> Vec<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Collect all the iterable's elements into a sorted vector in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":101358,"byte_end":101385,"line_start":224,"line_end":224,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,110,99,97,116,95,105,109,112,108,46,114,115],"byte_start":102024,"byte_end":102030,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"fn <I> (iterable: I) -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":103789,"byte_end":103799,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":2147483857}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":103704,"byte_end":103777,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":283},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":104140,"byte_end":104151,"line_start":63,"line_end":63,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"fn <I, J> (iterable: I) -> ConsTuples<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":287},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":104576,"byte_end":104588,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":2147483864},{"krate":0,"index":2147483865},{"krate":0,"index":2147483866},{"krate":0,"index":2147483867}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":104491,"byte_end":104564,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":104926,"byte_end":104938,"line_start":24,"line_end":24,"column_start":8,"column_end":20},"name":"combinations","qualname":"::combinations::combinations","value":"fn <I> (iter: I, n: usize) -> Combinations<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Combinations` from a clonable iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":107126,"byte_end":107129,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyBuffer<I>>::new","value":"fn (it: I) -> LazyBuffer<I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":107508,"byte_end":107511,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"len","qualname":"<LazyBuffer<I>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":107574,"byte_end":107581,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"is_done","qualname":"<LazyBuffer<I>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":107635,"byte_end":107643,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"get_next","qualname":"<LazyBuffer<I>>::get_next","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147483875},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":109029,"byte_end":109042,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147483879},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":109175,"byte_end":109182,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147483882},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":109303,"byte_end":109309,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":304},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":108826,"byte_end":108830,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"Diff::{FirstMismatch, Shorter, Longer}","parent":null,"children":[{"krate":0,"index":2147483875},{"krate":0,"index":2147483879},{"krate":0,"index":2147483882}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":305},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":110058,"byte_end":110067,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn <I, J, F> (i: I, j: J, is_equal: F) -> Option<Diff<I::IntoIter, J::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":309},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":111187,"byte_end":111197,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":2147483891},{"krate":0,"index":2147483892}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":873},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":111620,"byte_end":111626,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":2147484528},{"krate":0,"index":2147484529}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":310},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":111769,"byte_end":111779,"line_start":30,"line_end":30,"column_start":8,"column_end":18},"name":"new_format","qualname":"::format::new_format","value":"fn <'a, I, F> (iter: I, separator: &'a str, f: F) -> FormatWith<'a, I, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":311},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":112062,"byte_end":112080,"line_start":40,"line_end":40,"column_start":8,"column_end":26},"name":"new_format_default","qualname":"::format::new_format_default","value":"fn <'a, I> (iter: I, separator: &'a str) -> Format<'a, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":323},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":114339,"byte_end":114342,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":114351,"byte_end":114359,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"call_mut","qualname":"::groupbylazy::KeyFunction::call_mut","value":"fn (&mut self, arg: A) -> Self::Key","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" A trait to unify FnMut for GroupBy with the chunk key in IntoChunks\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":123791,"byte_end":123798,"line_start":288,"line_end":288,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":2147483940},{"krate":0,"index":2147483941}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":123706,"byte_end":123779,"line_start":287,"line_end":287,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":346},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":124058,"byte_end":124061,"line_start":298,"line_end":298,"column_start":8,"column_end":11},"name":"new","qualname":"::groupbylazy::new","value":"fn <K, J, F> (iter: J, f: F) -> GroupBy<K, J::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":354},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":125665,"byte_end":125671,"line_start":358,"line_end":358,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":2147483955}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":125580,"byte_end":125653,"line_start":357,"line_end":357,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":358},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":126539,"byte_end":126544,"line_start":392,"line_end":392,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":2147483965},{"krate":0,"index":2147483966},{"krate":0,"index":2147483967}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":364},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":127296,"byte_end":127306,"line_start":429,"line_end":429,"column_start":8,"column_end":18},"name":"new_chunks","qualname":"::groupbylazy::new_chunks","value":"fn <J> (iter: J, size: usize) -> IntoChunks<J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create a new\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":365},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":128479,"byte_end":128489,"line_start":464,"line_end":464,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":2147483981},{"krate":0,"index":2147483982}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":128394,"byte_end":128467,"line_start":463,"line_end":463,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":373},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":129612,"byte_end":129618,"line_start":509,"line_end":509,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":2147483987}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":129527,"byte_end":129600,"line_start":508,"line_end":508,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":130336,"byte_end":130341,"line_start":540,"line_end":540,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":2147483993},{"krate":0,"index":2147483994},{"krate":0,"index":2147483995}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":894},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":131368,"byte_end":131379,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":2147484554},{"krate":0,"index":2147484555},{"krate":0,"index":2147484556}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":131283,"byte_end":131356,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":386},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":131523,"byte_end":131534,"line_start":23,"line_end":23,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::intersperse::intersperse","value":"fn <I> (iter: I, elt: I::Item) -> Intersperse<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Intersperse iterator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":135549,"byte_end":135555,"line_start":113,"line_end":113,"column_start":12,"column_end":18},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMerge {  }","parent":null,"children":[{"krate":0,"index":2147484014}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":135464,"byte_end":135537,"line_start":112,"line_end":112,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":406},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":135933,"byte_end":135939,"line_start":131,"line_end":131,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"fn <I> (iterable: I) -> KMerge<<I::Item as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":413},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":137593,"byte_end":137601,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":2147484023},{"krate":0,"index":2147484024}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":137508,"byte_end":137581,"line_start":187,"line_end":187,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":414},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":137828,"byte_end":137837,"line_start":198,"line_end":198,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"fn <I, F> (iterable: I, mut less_than: F) -> KMergeBy<<I::Item as IntoIterator>::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":139546,"byte_end":139559,"line_start":10,"line_end":10,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"fn <I, J, F> (left: I, right: J, cmp_fn: F) -> MergeJoinBy<I::IntoIter, J::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":427},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":140185,"byte_end":140196,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":2147484038},{"krate":0,"index":2147484039},{"krate":0,"index":2147484040}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":140100,"byte_end":140173,"line_start":26,"line_end":26,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484559},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":141967,"byte_end":141977,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484560},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":142059,"byte_end":142069,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484562},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":142182,"byte_end":142188,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":897},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":141922,"byte_end":141934,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"MinMaxResult::{NoElements, OneElement, MinMax}","parent":null,"children":[{"krate":0,"index":2147484559},{"krate":0,"index":2147484560},{"krate":0,"index":2147484562}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":141913,"byte_end":142196,"line_start":5,"line_end":15,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":143006,"byte_end":143017,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn (self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":143314,"byte_end":143325,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"minmax_impl","qualname":"::minmax::minmax_impl","value":"fn <I, K, F, L> (mut it: I, mut key_for: F, mut lt: L) -> MinMaxResult<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Implementation guts for `minmax` and `minmax_by_key`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":145800,"byte_end":145809,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":2147484570},{"krate":0,"index":2147484571},{"krate":0,"index":2147484572}],"decl_id":null,"docs":" See [`multipeek()`](../fn.multipeek.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":440},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":146035,"byte_end":146044,"line_start":19,"line_end":19,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"fn <I> (iterable: I) -> MultiPeek<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":146326,"byte_end":146336,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":146600,"byte_end":146604,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":911},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":147924,"byte_end":147932,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":2147484576},{"krate":0,"index":2147484577},{"krate":0,"index":2147484578},{"krate":0,"index":2147484579}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":147839,"byte_end":147912,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":148057,"byte_end":148066,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::pad_tail::pad_using","value":"fn <I, F> (iter: I, min: usize, filler: F) -> PadUsing<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **PadUsing** iterator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":150130,"byte_end":150141,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext:  Iterator","parent":null,"children":[{"krate":0,"index":466}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":150325,"byte_end":150337,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"fn <F> (&mut self, accept: F) -> Option<Self::Item>","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":473},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":151856,"byte_end":151872,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":2147484072},{"krate":0,"index":2147484073}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":151771,"byte_end":151844,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":474},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":151983,"byte_end":152001,"line_start":88,"line_end":88,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::peeking_take_while::peeking_take_while","value":"fn <I, F> (iter: &mut I, f: F) -> PeekingTakeWhile<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a PeekingTakeWhile\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":481},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":154341,"byte_end":154355,"line_start":8,"line_end":8,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":2147484082},{"krate":0,"index":2147484083}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":154256,"byte_end":154329,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":486},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":156260,"byte_end":156275,"line_start":70,"line_end":70,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"fn <I, F, T, E, R> (iterable: I, processor: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":934},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":156799,"byte_end":156807,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":2147484609},{"krate":0,"index":2147484610}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":157010,"byte_end":157020,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"fn <I> (iterable: I) -> PutBackN<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":157603,"byte_end":157611,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":500},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":158225,"byte_end":158231,"line_start":7,"line_end":7,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":2147484100}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147484100},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":158273,"byte_end":158279,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":159548,"byte_end":159554,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"fn <I> (iterable: I) -> RcIter<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":515},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":161044,"byte_end":161051,"line_start":6,"line_end":6,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":2147484109},{"krate":0,"index":2147484110}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":160967,"byte_end":161032,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":161168,"byte_end":161176,"line_start":12,"line_end":12,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"fn <A> (element: A, n: usize) -> RepeatN<A>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":527},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162133,"byte_end":162141,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SizeHint","qualname":"::size_hint::SizeHint","value":"(usize, Option<usize>)","parent":null,"children":[],"decl_id":null,"docs":" **SizeHint** is the return type of **Iterator::size_hint()**.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162218,"byte_end":162221,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"add","qualname":"::size_hint::add","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Add **SizeHint** correctly.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162201,"byte_end":162210,"line_start":11,"line_end":11,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162506,"byte_end":162516,"line_start":24,"line_end":24,"column_start":8,"column_end":18},"name":"add_scalar","qualname":"::size_hint::add_scalar","value":"fn (sh: SizeHint, x: usize) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Add **x** correctly to a **SizeHint**.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162489,"byte_end":162498,"line_start":23,"line_end":23,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162765,"byte_end":162775,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"sub_scalar","qualname":"::size_hint::sub_scalar","value":"fn (sh: SizeHint, x: usize) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Sbb **x** correctly to a **SizeHint**.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162728,"byte_end":162737,"line_start":32,"line_end":32,"column_start":1,"column_end":10}},{"value":"allow(dead_code)","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":162738,"byte_end":162757,"line_start":33,"line_end":33,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":163361,"byte_end":163364,"line_start":58,"line_end":58,"column_start":8,"column_end":11},"name":"mul","qualname":"::size_hint::mul","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Multiply **SizeHint** correctly","sig":null,"attributes":[{"value":"inline","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":163344,"byte_end":163353,"line_start":57,"line_end":57,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":163707,"byte_end":163717,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"mul_scalar","qualname":"::size_hint::mul_scalar","value":"fn (sh: SizeHint, x: usize) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Multiply **x** correctly with a **SizeHint**.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":163690,"byte_end":163699,"line_start":69,"line_end":69,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":163926,"byte_end":163929,"line_start":79,"line_end":79,"column_start":8,"column_end":11},"name":"max","qualname":"::size_hint::max","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":163909,"byte_end":163918,"line_start":78,"line_end":78,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":164264,"byte_end":164267,"line_start":95,"line_end":95,"column_start":8,"column_end":11},"name":"min","qualname":"::size_hint::min","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":164247,"byte_end":164256,"line_start":94,"line_end":94,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":538},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":164787,"byte_end":164797,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":2147484119}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":165489,"byte_end":165500,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"fn <F, A> (function: F) -> RepeatCall<F>","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":167107,"byte_end":167113,"line_start":97,"line_end":97,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"fn <A, St, F> (initial_state: St, f: F) -> Unfold<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":167539,"byte_end":167545,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":2147484614},{"krate":0,"index":2147484615}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":167462,"byte_end":167527,"line_start":114,"line_end":114,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2147484615},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":167653,"byte_end":167658,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":944},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":168318,"byte_end":168325,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":2147484620},{"krate":0,"index":2147484621}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":168241,"byte_end":168306,"line_start":144,"line_end":144,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":169082,"byte_end":169089,"line_start":180,"line_end":180,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"fn <St, F> (initial_value: St, f: F) -> Iterate<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":563},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,101,101,46,114,115],"byte_start":169776,"byte_end":169779,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":2147484145},{"krate":0,"index":2147484146}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,101,101,46,114,115],"byte_start":169691,"byte_end":169764,"line_start":18,"line_end":18,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,101,101,46,114,115],"byte_start":169881,"byte_end":169884,"line_start":26,"line_end":26,"column_start":8,"column_end":11},"name":"new","qualname":"::tee::new","value":"fn <I> (iter: I) -> (Tee<I>, Tee<I>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":572},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":171608,"byte_end":171619,"line_start":9,"line_end":9,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":2147484151},{"krate":0,"index":2147484152}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":580},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":172845,"byte_end":172851,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":2147484158},{"krate":0,"index":2147484159}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":172760,"byte_end":172833,"line_start":63,"line_end":63,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":581},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":173008,"byte_end":173014,"line_start":73,"line_end":73,"column_start":8,"column_end":14},"name":"tuples","qualname":"::tuple_impl::tuples","value":"fn <I, T> (iter: I) -> Tuples<I, T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new tuples iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":173890,"byte_end":173901,"line_start":108,"line_end":108,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"fn (self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":587},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":174248,"byte_end":174260,"line_start":119,"line_end":119,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":2147484168},{"krate":0,"index":2147484169}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":174163,"byte_end":174236,"line_start":118,"line_end":118,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":588},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":174419,"byte_end":174432,"line_start":128,"line_end":128,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::tuple_impl::tuple_windows","value":"fn <I, T> (mut iter: I) -> TupleWindows<I, T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new tuple windows iterator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":593},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175557,"byte_end":175569,"line_start":172,"line_end":172,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect:  Sized","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":594},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175588,"byte_end":175592,"line_start":173,"line_end":173,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":595},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175603,"byte_end":175609,"line_start":174,"line_end":174,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175688,"byte_end":175705,"line_start":176,"line_end":176,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"fn <I> (iter: I, buf: &mut Self::Buffer) -> Option<Self>","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175816,"byte_end":175840,"line_start":179,"line_end":179,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"fn <I> (iter: I) -> Option<Self>","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175927,"byte_end":175936,"line_start":182,"line_end":182,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"fn () -> usize","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175957,"byte_end":175972,"line_start":184,"line_end":184,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"fn (&mut self, item: Self::Item) -> ()","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":980},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":178699,"byte_end":178707,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":2147484642},{"krate":0,"index":2147484643},{"krate":0,"index":2147484644}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":178614,"byte_end":178687,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":608},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":179035,"byte_end":179044,"line_start":27,"line_end":27,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::unique_impl::unique_by","value":"fn <I, V, F> (iter: I, f: F) -> UniqueBy<I, V, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UniqueBy` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":984},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":181095,"byte_end":181101,"line_start":103,"line_end":103,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":2147484651}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":181010,"byte_end":181083,"line_start":102,"line_end":102,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":181317,"byte_end":181323,"line_start":114,"line_end":114,"column_start":8,"column_end":14},"name":"unique","qualname":"::unique_impl::unique","value":"fn <I> (iter: I) -> Unique<I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":623},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":181902,"byte_end":181914,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":2147484190},{"krate":0,"index":2147484191}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":181817,"byte_end":181890,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182053,"byte_end":182066,"line_start":17,"line_end":17,"column_start":8,"column_end":21},"name":"with_position","qualname":"::with_position::with_position","value":"fn <I> (iter: I) -> WithPosition<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `WithPosition` iterator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484654},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182531,"byte_end":182536,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":988},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484656},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182601,"byte_end":182607,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":988},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484658},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182650,"byte_end":182654,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":988},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484660},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182697,"byte_end":182701,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":988},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":988},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182478,"byte_end":182486,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"Position::{First, Middle, Last, Only}","parent":null,"children":[{"krate":0,"index":2147484654},{"krate":0,"index":2147484656},{"krate":0,"index":2147484658},{"krate":0,"index":2147484660}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182469,"byte_end":182707,"line_start":31,"line_end":40,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182774,"byte_end":182784,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":997},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":184583,"byte_end":184588,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":2147484667},{"krate":0,"index":2147484668}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":184498,"byte_end":184571,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":184963,"byte_end":184969,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"fn <I, J> (i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1000},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":186387,"byte_end":186397,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":2147484673},{"krate":0,"index":2147484674}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":186302,"byte_end":186375,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":186488,"byte_end":186499,"line_start":23,"line_end":23,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::zip_longest::zip_longest","value":"fn <T, U> (a: T, b: U) -> ZipLongest<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ZipLongest` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1003},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":188414,"byte_end":188417,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2147484679}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":188329,"byte_end":188402,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":189581,"byte_end":189589,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"fn <T, U> (t: U) -> Zip<T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":662},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7908,"byte_end":7917,"line_start":276,"line_end":276,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools:  Iterator","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718}],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8316,"byte_end":8326,"line_start":291,"line_end":291,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn <J> (self, other: J) -> Interleave<Self, J::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8849,"byte_end":8868,"line_start":309,"line_end":309,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn <J> (self, other: J) -> InterleaveShortest<Self, J::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9447,"byte_end":9458,"line_start":328,"line_end":328,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10701,"byte_end":10712,"line_start":362,"line_end":362,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn <J> (self, other: J) -> ZipLongest<Self, J::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11150,"byte_end":11156,"line_start":375,"line_end":375,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn <J> (self, other: J) -> ZipEq<Self, J::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12071,"byte_end":12079,"line_start":405,"line_end":405,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn <B, F> (self, f: F) -> Batching<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13710,"byte_end":13718,"line_start":446,"line_end":446,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"fn <K, F> (self, key: F) -> GroupBy<K, Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14997,"byte_end":15003,"line_start":482,"line_end":482,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"fn (self, size: usize) -> IntoChunks<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16359,"byte_end":16372,"line_start":520,"line_end":520,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"fn <T> (self) -> TupleWindows<Self, T>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17681,"byte_end":17687,"line_start":559,"line_end":559,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"fn <T> (self) -> Tuples<Self, T>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18496,"byte_end":18499,"line_start":584,"line_end":584,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"fn (self) -> (Tee<Self>, Tee<Self>)","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19137,"byte_end":19141,"line_start":607,"line_end":607,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn (self, n: usize) -> Step<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19658,"byte_end":19669,"line_start":624,"line_end":624,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"fn <F, T, U, E> (self, f: F) -> MapResults<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20332,"byte_end":20337,"line_start":645,"line_end":645,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn <J> (self, other: J) -> Merge<Self, J::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21114,"byte_end":21122,"line_start":669,"line_end":669,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn <J, F> (self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22712,"byte_end":22725,"line_start":709,"line_end":709,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"fn <J, F> (self, other: J, cmp_fn: F) -> MergeJoinBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23559,"byte_end":23565,"line_start":735,"line_end":735,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"fn (self) -> KMerge<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24570,"byte_end":24579,"line_start":764,"line_end":764,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"fn <F> (self, first: F) -> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25331,"byte_end":25348,"line_start":785,"line_end":785,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn <J> (self, other: J) -> Product<Self, J::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26770,"byte_end":26778,"line_start":822,"line_end":822,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn <F> (self, f: F) -> Coalesce<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27492,"byte_end":27497,"line_start":844,"line_end":844,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn (self) -> Dedup<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28188,"byte_end":28194,"line_start":866,"line_end":866,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"fn (self) -> Unique<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28951,"byte_end":28960,"line_start":888,"line_end":888,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"fn <V, F> (self, f: F) -> UniqueBy<Self, V, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29697,"byte_end":29715,"line_start":908,"line_end":908,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"fn <F> (&mut self, accept: F) -> PeekingTakeWhile<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30661,"byte_end":30675,"line_start":933,"line_end":933,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn <F> (&mut self, accept: F) -> TakeWhileRef<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31341,"byte_end":31351,"line_start":954,"line_end":954,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn <A> (self) -> WhileSome<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32782,"byte_end":32800,"line_start":993,"line_end":993,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"fn <T> (self) -> TupleCombinations<Self, T>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33606,"byte_end":33618,"line_start":1019,"line_end":1019,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"fn (self, n: usize) -> Combinations<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34448,"byte_end":34457,"line_start":1043,"line_end":1043,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn <F> (self, min: usize, f: F) -> PadUsing<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35021,"byte_end":35028,"line_start":1063,"line_end":1063,"column_start":8,"column_end":15},"name":"flatten","qualname":"::Itertools::flatten","value":"fn (self) -> Flatten<Self, <Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35953,"byte_end":35966,"line_start":1089,"line_end":1089,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"fn (self) -> WithPosition<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36645,"byte_end":36654,"line_start":1108,"line_end":1108,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"fn <P> (self, predicate: P) -> Positions<Self, P>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37207,"byte_end":37213,"line_start":1125,"line_end":1125,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"fn <F> (self, updater: F) -> Update<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37838,"byte_end":37848,"line_start":1146,"line_end":1146,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"fn <T> (&mut self) -> Option<T>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38590,"byte_end":38603,"line_start":1171,"line_end":1171,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"fn <T> (mut self) -> Option<T>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39290,"byte_end":39303,"line_start":1195,"line_end":1195,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn <P> (&mut self, mut pred: P) -> Option<(usize, Self::Item)>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40152,"byte_end":40161,"line_start":1224,"line_end":1224,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40841,"byte_end":40849,"line_start":1245,"line_end":1245,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41542,"byte_end":41555,"line_start":1269,"line_end":1269,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42278,"byte_end":42285,"line_start":1296,"line_end":1296,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn <F> (self, mut f: F) -> ()","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42948,"byte_end":42954,"line_start":1316,"line_end":1316,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"fn (self) -> Self::Item","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43282,"byte_end":43293,"line_start":1326,"line_end":1326,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43910,"byte_end":43918,"line_start":1348,"line_end":1348,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn <'a, A, J> (&mut self, from: J) -> usize","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44662,"byte_end":44666,"line_start":1374,"line_end":1374,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"fn (&mut self, sep: &str) -> String","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45794,"byte_end":45800,"line_start":1408,"line_end":1408,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn (self, sep: &str) -> Format<Self>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47278,"byte_end":47289,"line_start":1446,"line_end":1446,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"fn <F> (self, sep: &str, format: F) -> FormatWith<Self, F>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49010,"byte_end":49022,"line_start":1495,"line_end":1495,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn <A, E, B, F> (&mut self, mut start: B, mut f: F) -> Result<B, E>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50179,"byte_end":50191,"line_start":1527,"line_end":1527,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn <A, B, F> (&mut self, mut start: B, mut f: F) -> Option<B>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50991,"byte_end":50996,"line_start":1552,"line_end":1552,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn <F> (mut self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52510,"byte_end":52520,"line_start":1598,"line_end":1598,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn <B, F> (&mut self, init: B, mut f: F) -> FoldWhile<B>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":53462,"byte_end":53468,"line_start":1626,"line_end":1626,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54364,"byte_end":54373,"line_start":1654,"line_end":1654,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"fn <F> (self, cmp: F) -> Vec<Self::Item>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":55313,"byte_end":55326,"line_start":1685,"line_end":1685,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn <A, B, F, L, R> (self, predicate: F) -> (A, B)","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":57133,"byte_end":57139,"line_start":1739,"line_end":1739,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn (self) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":57835,"byte_end":57848,"line_start":1756,"line_end":1756,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn <K, F> (self, key: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58486,"byte_end":58495,"line_start":1770,"line_end":1770,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn <F> (self, mut compare: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59224,"byte_end":59229,"line_start":1794,"line_end":1794,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn <I, J> (a: I, b: J) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60049,"byte_end":60061,"line_start":1822,"line_end":1822,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn <I, J> (a: I, b: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61288,"byte_end":61297,"line_start":1864,"line_end":1864,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn <'a, A, I, F> (iter: I, mut pred: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484790},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62218,"byte_end":62226,"line_start":1894,"line_end":1894,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":1062},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484792},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62287,"byte_end":62291,"line_start":1896,"line_end":1896,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":1062},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1062},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62158,"byte_end":62167,"line_start":1892,"line_end":1892,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"FoldWhile::{Continue, Done}","parent":null,"children":[{"krate":0,"index":2147484790},{"krate":0,"index":2147484792}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62149,"byte_end":62297,"line_start":1892,"line_end":1897,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62383,"byte_end":62393,"line_start":1901,"line_end":1901,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62586,"byte_end":62593,"line_start":1908,"line_end":1908,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[],"refs":[{"kind":"Mod","span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3242,"byte_end":3246,"line_start":119,"line_end":119,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":246}}],"macro_refs":[],"relations":[{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":64720,"byte_end":64730,"line_start":60,"line_end":60,"column_start":25,"column_end":35},"kind":"Impl","from":{"krate":0,"index":726},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":66141,"byte_end":66159,"line_start":116,"line_end":116,"column_start":25,"column_end":43},"kind":"Impl","from":{"krate":0,"index":731},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":68409,"byte_end":68416,"line_start":201,"line_end":201,"column_start":9,"column_end":16},"kind":"Impl","from":{"krate":0,"index":736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":69035,"byte_end":69042,"line_start":226,"line_end":226,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":736},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":70889,"byte_end":70896,"line_start":299,"line_end":299,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":741},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73328,"byte_end":73336,"line_start":374,"line_end":374,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":746},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73564,"byte_end":73572,"line_start":383,"line_end":383,"column_start":28,"column_end":36},"kind":"Impl","from":{"krate":0,"index":746},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":74612,"byte_end":74616,"line_start":427,"line_end":427,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":750},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":75214,"byte_end":75218,"line_start":454,"line_end":454,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":750},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":75434,"byte_end":75443,"line_start":469,"line_end":469,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":140},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":75675,"byte_end":75684,"line_start":480,"line_end":480,"column_start":12,"column_end":21},"kind":"Impl","from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":77187,"byte_end":77192,"line_start":530,"line_end":530,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":146},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":77429,"byte_end":77434,"line_start":541,"line_end":541,"column_start":27,"column_end":32},"kind":"Impl","from":{"krate":0,"index":146},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78240,"byte_end":78245,"line_start":573,"line_end":573,"column_start":25,"column_end":30},"kind":"Impl","from":{"krate":0,"index":146},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":79083,"byte_end":79090,"line_start":604,"line_end":604,"column_start":30,"column_end":37},"kind":"Impl","from":{"krate":0,"index":155},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":79615,"byte_end":79622,"line_start":626,"line_end":626,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":155},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":79890,"byte_end":79897,"line_start":638,"line_end":638,"column_start":28,"column_end":35},"kind":"Impl","from":{"krate":0,"index":155},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":80357,"byte_end":80369,"line_start":662,"line_end":662,"column_start":9,"column_end":21},"kind":"Impl","from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81603,"byte_end":81611,"line_start":704,"line_end":704,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":167},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81780,"byte_end":81788,"line_start":713,"line_end":713,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":167},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82175,"byte_end":82183,"line_start":733,"line_end":733,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":167},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82816,"byte_end":82821,"line_start":758,"line_end":758,"column_start":26,"column_end":31},"kind":"Impl","from":{"krate":0,"index":176},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83185,"byte_end":83190,"line_start":779,"line_end":779,"column_start":24,"column_end":29},"kind":"Impl","from":{"krate":0,"index":176},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83323,"byte_end":83328,"line_start":786,"line_end":786,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":176},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84537,"byte_end":84549,"line_start":830,"line_end":830,"column_start":31,"column_end":43},"kind":"Impl","from":{"krate":0,"index":186},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84886,"byte_end":84898,"line_start":843,"line_end":843,"column_start":29,"column_end":41},"kind":"Impl","from":{"krate":0,"index":186},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85997,"byte_end":86006,"line_start":885,"line_end":885,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86876,"byte_end":86881,"line_start":919,"line_end":919,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":841},"to":{"krate":0,"index":198}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87315,"byte_end":87332,"line_start":936,"line_end":936,"column_start":25,"column_end":42},"kind":"Impl","from":{"krate":0,"index":770},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87584,"byte_end":87601,"line_start":952,"line_end":952,"column_start":21,"column_end":38},"kind":"Impl","from":{"krate":0,"index":773},"to":{"krate":2,"index":1232}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87719,"byte_end":87736,"line_start":958,"line_end":958,"column_start":32,"column_end":49},"kind":"Impl","from":{"krate":0,"index":773},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90464,"byte_end":90471,"line_start":1052,"line_end":1052,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":812},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92045,"byte_end":92055,"line_start":1108,"line_end":1108,"column_start":34,"column_end":44},"kind":"Impl","from":{"krate":0,"index":217},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93346,"byte_end":93355,"line_start":1159,"line_end":1159,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":225},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93844,"byte_end":93853,"line_start":1181,"line_end":1181,"column_start":36,"column_end":45},"kind":"Impl","from":{"krate":0,"index":225},"to":{"krate":2,"index":1857}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94691,"byte_end":94697,"line_start":1213,"line_end":1213,"column_start":25,"column_end":31},"kind":"Impl","from":{"krate":0,"index":233},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95563,"byte_end":95569,"line_start":1249,"line_end":1249,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":233},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95675,"byte_end":95681,"line_start":1255,"line_end":1255,"column_start":36,"column_end":42},"kind":"Impl","from":{"krate":0,"index":233},"to":{"krate":2,"index":1857}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":103876,"byte_end":103886,"line_start":51,"line_end":51,"column_start":22,"column_end":32},"kind":"Impl","from":{"krate":0,"index":280},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":104711,"byte_end":104723,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"kind":"Impl","from":{"krate":0,"index":287},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":105386,"byte_end":105398,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"kind":"Impl","from":{"krate":0,"index":287},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":107077,"byte_end":107087,"line_start":109,"line_end":109,"column_start":9,"column_end":19},"kind":"Impl","from":{"krate":0,"index":870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":108023,"byte_end":108033,"line_start":155,"line_end":155,"column_start":26,"column_end":36},"kind":"Impl","from":{"krate":0,"index":870},"to":{"krate":2,"index":998}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":112278,"byte_end":112288,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":"Impl","from":{"krate":0,"index":309},"to":{"krate":2,"index":3473}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":113037,"byte_end":113043,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":"Impl","from":{"krate":0,"index":873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":114441,"byte_end":114442,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":"Impl","from":{"krate":0,"index":2147483910},"to":{"krate":0,"index":322}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":114730,"byte_end":114740,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"kind":"Impl","from":{"krate":0,"index":328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":114936,"byte_end":114946,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"kind":"Impl","from":{"krate":0,"index":328},"to":{"krate":0,"index":322}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":115988,"byte_end":115998,"line_start":76,"line_end":76,"column_start":15,"column_end":25},"kind":"Impl","from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":122776,"byte_end":122786,"line_start":262,"line_end":262,"column_start":15,"column_end":25},"kind":"Impl","from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":124598,"byte_end":124605,"line_start":319,"line_end":319,"column_start":15,"column_end":22},"kind":"Impl","from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":125812,"byte_end":125818,"line_start":365,"line_end":365,"column_start":32,"column_end":38},"kind":"Impl","from":{"krate":0,"index":354},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":126728,"byte_end":126733,"line_start":401,"line_end":401,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":358},"to":{"krate":2,"index":965}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":126904,"byte_end":126909,"line_start":410,"line_end":410,"column_start":32,"column_end":37},"kind":"Impl","from":{"krate":0,"index":358},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":128741,"byte_end":128751,"line_start":474,"line_end":474,"column_start":9,"column_end":19},"kind":"Impl","from":{"krate":0,"index":365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":129737,"byte_end":129743,"line_start":516,"line_end":516,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":373},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":130502,"byte_end":130507,"line_start":549,"line_end":549,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":377},"to":{"krate":2,"index":965}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":130666,"byte_end":130671,"line_start":558,"line_end":558,"column_start":26,"column_end":31},"kind":"Impl","from":{"krate":0,"index":377},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":131752,"byte_end":131763,"line_start":34,"line_end":34,"column_start":22,"column_end":33},"kind":"Impl","from":{"krate":0,"index":894},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":133071,"byte_end":133079,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":"Impl","from":{"krate":0,"index":396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":133975,"byte_end":133983,"line_start":62,"line_end":62,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":396},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":136424,"byte_end":136430,"line_start":144,"line_end":144,"column_start":19,"column_end":25},"kind":"Impl","from":{"krate":0,"index":405},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":136599,"byte_end":136605,"line_start":153,"line_end":153,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":405},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":138481,"byte_end":138489,"line_start":214,"line_end":214,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":413},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":140329,"byte_end":140340,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":427},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":142213,"byte_end":142225,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":"Impl","from":{"krate":0,"index":897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":146239,"byte_end":146248,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"kind":"Impl","from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":146401,"byte_end":146410,"line_start":38,"line_end":38,"column_start":19,"column_end":28},"kind":"Impl","from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":147051,"byte_end":147060,"line_start":60,"line_end":60,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":906},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":147484,"byte_end":147493,"line_start":80,"line_end":80,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":906},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":148318,"byte_end":148326,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":911},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":149089,"byte_end":149097,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":911},"to":{"krate":2,"index":1857}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":149554,"byte_end":149562,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":"Impl","from":{"krate":0,"index":911},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":150144,"byte_end":150152,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1686},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":150458,"byte_end":150466,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":2,"index":17300},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":150786,"byte_end":150793,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":736},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":151210,"byte_end":151218,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":934},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":152173,"byte_end":152189,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":"Impl","from":{"krate":0,"index":473},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153277,"byte_end":153281,"line_start":135,"line_end":135,"column_start":48,"column_end":52},"kind":"Impl","from":{"krate":2,"index":2594},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153333,"byte_end":153338,"line_start":136,"line_end":136,"column_start":43,"column_end":48},"kind":"Impl","from":{"krate":2,"index":17613},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153387,"byte_end":153398,"line_start":137,"line_end":137,"column_start":43,"column_end":54},"kind":"Impl","from":{"krate":2,"index":17618},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153447,"byte_end":153452,"line_start":138,"line_end":138,"column_start":43,"column_end":48},"kind":"Impl","from":{"krate":2,"index":17623},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153507,"byte_end":153511,"line_start":139,"line_end":139,"column_start":49,"column_end":53},"kind":"Impl","from":{"krate":2,"index":17361},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153569,"byte_end":153573,"line_start":140,"line_end":140,"column_start":49,"column_end":53},"kind":"Impl","from":{"krate":2,"index":17413},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153625,"byte_end":153630,"line_start":141,"line_end":141,"column_start":43,"column_end":48},"kind":"Impl","from":{"krate":2,"index":1811},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153730,"byte_end":153734,"line_start":143,"line_end":143,"column_start":67,"column_end":71},"kind":"Impl","from":{"krate":3,"index":1427},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":153836,"byte_end":153840,"line_start":145,"line_end":145,"column_start":65,"column_end":69},"kind":"Impl","from":{"krate":3,"index":2517},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":154039,"byte_end":154042,"line_start":149,"line_end":149,"column_start":39,"column_end":42},"kind":"Impl","from":{"krate":2,"index":17251},"to":{"krate":0,"index":465}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":154453,"byte_end":154467,"line_start":13,"line_end":13,"column_start":32,"column_end":46},"kind":"Impl","from":{"krate":0,"index":481},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":157193,"byte_end":157201,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":157703,"byte_end":157711,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"kind":"Impl","from":{"krate":0,"index":934},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":159710,"byte_end":159716,"line_start":52,"line_end":52,"column_start":19,"column_end":25},"kind":"Impl","from":{"krate":0,"index":500},"to":{"krate":2,"index":1213}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":159851,"byte_end":159857,"line_start":59,"line_end":59,"column_start":25,"column_end":31},"kind":"Impl","from":{"krate":0,"index":500},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":160416,"byte_end":160422,"line_start":78,"line_end":78,"column_start":33,"column_end":39},"kind":"Impl","from":{"krate":0,"index":500},"to":{"krate":2,"index":1857}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":161380,"byte_end":161387,"line_start":22,"line_end":22,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":515},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":161777,"byte_end":161784,"line_start":42,"line_end":42,"column_start":33,"column_end":40},"kind":"Impl","from":{"krate":0,"index":515},"to":{"krate":2,"index":1857}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":161934,"byte_end":161941,"line_start":51,"line_end":51,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":515},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":164839,"byte_end":164849,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"kind":"Impl","from":{"krate":0,"index":538},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":165623,"byte_end":165633,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"kind":"Impl","from":{"krate":0,"index":538},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":167302,"byte_end":167308,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"kind":"Impl","from":{"krate":0,"index":941},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":167695,"byte_end":167701,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":941},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":168390,"byte_end":168397,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"kind":"Impl","from":{"krate":0,"index":944},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":168500,"byte_end":168507,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":944},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,101,101,46,114,115],"byte_start":170187,"byte_end":170190,"line_start":35,"line_end":35,"column_start":22,"column_end":25},"kind":"Impl","from":{"krate":0,"index":563},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,101,101,46,114,115],"byte_start":171287,"byte_end":171290,"line_start":73,"line_end":73,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":563},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":171698,"byte_end":171709,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"kind":"Impl","from":{"krate":0,"index":572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":171882,"byte_end":171893,"line_start":27,"line_end":27,"column_start":22,"column_end":33},"kind":"Impl","from":{"krate":0,"index":572},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":172559,"byte_end":172570,"line_start":55,"line_end":55,"column_start":31,"column_end":42},"kind":"Impl","from":{"krate":0,"index":572},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":173219,"byte_end":173225,"line_start":83,"line_end":83,"column_start":25,"column_end":31},"kind":"Impl","from":{"krate":0,"index":580},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":173437,"byte_end":173443,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"kind":"Impl","from":{"krate":0,"index":580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175033,"byte_end":175045,"line_start":151,"line_end":151,"column_start":25,"column_end":37},"kind":"Impl","from":{"krate":0,"index":587},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":175571,"byte_end":175576,"line_start":172,"line_end":172,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":841},"to":{"krate":0,"index":593}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":178849,"byte_end":178857,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"kind":"Impl","from":{"krate":0,"index":980},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":179289,"byte_end":179297,"line_start":39,"line_end":39,"column_start":28,"column_end":36},"kind":"Impl","from":{"krate":0,"index":980},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":179994,"byte_end":180000,"line_start":67,"line_end":67,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":984},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":181179,"byte_end":181185,"line_start":107,"line_end":107,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":984},"to":{"krate":2,"index":3471}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":182717,"byte_end":182725,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":"Impl","from":{"krate":0,"index":988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":183004,"byte_end":183016,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":"Impl","from":{"krate":0,"index":623},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":184252,"byte_end":184264,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":"Impl","from":{"krate":0,"index":623},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":185175,"byte_end":185180,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":"Impl","from":{"krate":0,"index":997},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":185758,"byte_end":185763,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":997},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":186678,"byte_end":186688,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":"Impl","from":{"krate":0,"index":1000},"to":{"krate":2,"index":1686}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":187310,"byte_end":187320,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":"Impl","from":{"krate":0,"index":1000},"to":{"krate":2,"index":1857}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":188141,"byte_end":188151,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":"Impl","from":{"krate":0,"index":1000},"to":{"krate":2,"index":1863}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7920,"byte_end":7928,"line_start":276,"line_end":276,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1686},"to":{"krate":0,"index":662}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58802,"byte_end":58803,"line_start":1781,"line_end":1781,"column_start":31,"column_end":32},"kind":"Impl","from":{"krate":0,"index":2147484278},"to":{"krate":0,"index":662}},{"span":{"file_name":[46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62307,"byte_end":62316,"line_start":1899,"line_end":1899,"column_start":9,"column_end":18},"kind":"Impl","from":{"krate":0,"index":1062},"to":{"krate":4294967295,"index":4294967295}}]}